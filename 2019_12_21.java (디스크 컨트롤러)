import java.util.*;

class Solution {
    public int solution(int[][] jobs) {
        Arrays.sort(jobs, new Comparator<int[]> (){
            @Override
            public int compare(final int[] entry1, final int[] entry2){
                final int one =  entry1[0];
                final int two = entry2[0];
                return Integer.compare(one, two);
            }
        });
        int answer = 0;
        ArrayList<int[]> jobsList = new ArrayList<int[]>();  
		int sum = 0;
        int diskSum = 0; //disk들의 총합
        int current = 0;
        int while_i = 0;
        
		for(int i=0; i<jobs.length; i++){  
   			jobsList.add(new int[]{jobs[i][0], jobs[i][1]});
    	}
        int current_disk_value = jobsList.get(0)[1];
        int first_idx = 0;
        for(int i=1; i<jobsList.size(); i++){
            if(jobsList.get(0)[0] != jobsList.get(i)[0]){
                break;
            }
            if(current_disk_value > jobsList.get(i)[1]){
                first_idx = i;
            }
        }
        sum = jobsList.get(first_idx)[1] + jobsList.get(first_idx)[0];
        diskSum = sum - jobsList.get(first_idx)[0];
        jobsList.remove(first_idx);
        int idx = 0;
        int jobs_disk_time = 0; //디스크 배열의 소요 시간
        
        while(jobsList.size() > 0){
            if(jobsList.size() == 1){
                sum += jobsList.get(0)[1];
                diskSum += sum - jobsList.get(0)[0];
                break;
            }
           	jobs_disk_time = jobsList.get(0)[1];
            idx = 0;
            while_i = 0;
            for(int i=1; i<jobsList.size(); i++){
                if(jobsList.get(0)[0] != jobsList.get(i)[0]){
                    break;
                }
                
                if(jobs_disk_time > jobsList.get(i)[1]){
                    while_i = i;
                    idx = i;
                    jobs_disk_time = jobsList.get(i)[1];
                }
            }
            
            for(int i=while_i; i<jobsList.size(); i++){
            	if(jobsList.get(i)[0] > sum){
                    break;
                } 
                if(jobsList.get(i)[1] < jobs_disk_time){
                   	jobs_disk_time = jobsList.get(i)[1];
        			idx = i;             
                }
           	}
             
            if(jobsList.get(idx)[0] > sum){
                sum = jobsList.get(idx)[0]+jobsList.get(idx)[1];
            }else{
            	sum += jobsList.get(idx)[1];
            }
            diskSum += sum - jobsList.get(idx)[0];
            jobsList.remove(idx);
        }
        answer = diskSum / jobs.length;
        
        return answer;
    }
}
