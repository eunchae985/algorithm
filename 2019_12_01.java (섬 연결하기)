// 크루스칼, Union-Fine 알고리즘

// 사이클 유무 찾는 알고리즘은 힘들어서 인터넷 서칭을 많이함.. 이해하는데 더 초점을 둠

import java.util.*;

class Solution {
    public static int[] parent;
    
    public static void union(int x, int y) {
        x = find(x);
        y = find(y);
        if(x != y)
            parent[y] = x;
    }
	
    public static int find(int x) {
        if(parent[x] == x) {
            return x;
        }
        return parent[x] = find(parent[x]);
    }
    public static boolean isSameParent(int x, int y) {
        x = find(x);
        y = find(y);
        if(x == y) return true;
        else return false;
    }
    
    public int solution(int n, int[][] costs) {
        int answer = 0;
        
        // 오름차순 정렬
        Arrays.sort(costs, new Comparator<int[]>() { 
            @Override 
            public int compare(int[] a, int[] b) { 
                return a[2] >= b[2] ? 1 : -1; 
            } 
        });
        
        parent = new int[n];
        for(int i=1; i<n; i++){
            parent[i] = i;
        }
        
        // 사이클이 아니면 비용 더하기
        for(int i=0; i<costs.length; i++){
            if(!isSameParent(costs[i][0], costs[i][1])) {
                answer += costs[i][2];
                union(costs[i][0], costs[i][1]);
            }
        }
        
        return answer;
    }
}
