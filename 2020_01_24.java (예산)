import java.util.*;

class Solution {
    public int solution(int[] budgets, int M) {
        int answer = 0;
        Arrays.sort(budgets); //배열 오름차순
        long sum = 0; 
        long sum2 = 0; 
        // 이진 탐색
        int max = 0; 
        int min = 0;
        int mid = 0; //중간 값
        
        for(int i=0; i<budgets.length; i++){
            sum += budgets[i];
        }
        if(sum <= M){// 제일 처음에 예산들이 모두 배정 될 수 있는지 체크
            answer = budgets[budgets.length-1];
        }else{ // 안될 경우에 이진 탐색
            max = budgets[budgets.length-1]; //예산 중에 가장 큰 값
            while(true){
                if(max < min){
                    break;
                }
                mid = (max+min) / 2;
                sum2 = 0;
                for(int i=0; i<budgets.length; i++){
                	if(budgets[i] > mid){
                        sum2 += mid;
                    }else{
                        sum2 += budgets[i];
                    }
            	}
                
                if(sum2 > M){ //총 예산 보다 더 크면 오른쪽 값 빼줌
                    max = mid - 1;
                }else{ //총 예산 보다 더 작으면 왼쪽값 더해줌
                    min = mid + 1;
                    if(answer < mid){ //상한액이 더 크면 answer로
                        answer = mid;
                    }
                }
            }
        }
        
        /*
        효율성 2,3 통과x
        for(int i=0; i<budgets.length; i++){
            sum += budgets[i];
        }
        if(sum <= M){
            answer = budgets[budgets.length-1];
        }else{
            answer = budgets[budgets.length/2];
            while(true){
                sum2 = 0;
                for(int i=0; i<budgets.length; i++){
                	if(budgets[i] > answer){
                        sum2 += answer;
                    }else{
                        sum2 += budgets[i];
                    }
            	}
                
                if(sum2 > M){
                    answer--;
                }
                if(sum2 <= M){
                    break;
                }
            }
        }*/
        
        return answer;
    }
}
